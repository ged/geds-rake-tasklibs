# The file that lists all the settings required to build a rakefile for a project. The values 
# configure the prompts that will be given to the user when creating the Rakefile.
- project_name: Project name
- project_homepage:
    prompt: URL of project page
    validator: URI( args.first )
    stringify: true
- project_summary: Project summary
- project_description:
    prompt: Project description
    multiline: true
    post-process: "args.collect {|line| line.chomp }.join(\"\n\")"
- project_pubhost: Project publication host
- project_pubdir: Project publication directory

- post_install_message:
    prompt: Post-install message
    multiline: true
    post-process: "args.collect {|line| line.chomp }.join(\"\n\")"

- authors: 
    prompt: |-
        Enter the project's authors, one per line, in the form: 
            J. Random Hacker <jrandom@example.com>'
    multiline: true
    post-process: |-
        authors = args.collect {|line|
            if line =~ /(\S.*)\s<([^>]+)>/
                $stderr.puts "Author tuple: %p" % [ $~.captures ]
                $~.captures
            else
                $stderr.puts "I can't parse an author out of: %p" % [ line ]
                nil
            end
        }.compact.flatten
        $stderr.puts "Making a Hash of author tuples: %p" % [ authors ]
        Hash[ *authors ]

- project_dependencies:
    prompt: "Runtime dependencies (<gemname>: <gem_version_spec>)"
    multiline: true
    post-process: |-
        pairs = args.collect {|line|
            if line.is_a?( Hash )
                line
            else
                gem, version = line.split(/:\s*/, 2)
                [gem, version||'>=0']
            end
        }.flatten
        Hash[ *pairs ]
                
- dev_dependencies:
    prompt: "Development dependencies (<gemname>: <gem_version_spec>)"
    multiline: true
    post-process: |-
        pairs = args.collect {|line|
            if line.is_a?( Hash )
                line
            else
                gem, version = line.split(/:\s*/, 2)
                [gem, version||'>=0']
            end
        }.flatten
        Hash[ *pairs ]
                
- project_requirements:
    prompt: "Project requirements (<software>: <version>)"
    multiline: true
    post-process: |-
        pairs = args.collect {|line|
            if line.is_a?( Hash )
                line
            else
                gem, version = line.split(/:\s*/, 2)
                [gem, version||'>=0']
            end
        }.flatten
        Hash[ *pairs ]

- rubyforge_group: Rubyforge Group
- rubyforge_project: Rubyforge Project Name

- additional_pkgfiles:
    multiline: true
    prompt: Additional files to add to the distribution (globs work)

- version_file:
    prompt: File to read the project version from, relative to the lib/ directory
